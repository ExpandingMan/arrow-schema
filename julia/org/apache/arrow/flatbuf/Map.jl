# automatically generated by the FlatBuffers compiler, do not modify

org.apache.arrow.flatbuf.eval(quote


FlatBuffers.@with_kw mutable struct Map
#=
#  A Map is a logical nested type that is represented as
# 
#  List<entries: Struct<key: K, value: V>>
# 
#  In this layout, the keys and values are each respectively contiguous. We do
#  not constrain the key and value types, so the application is responsible
#  for ensuring that the keys are hashable and unique. Whether the keys are sorted
#  may be set in the metadata for this field.
# 
#  In a field with Map type, the field has a child Struct field, which then
#  has two children: key type and the second the value type. The names of the
#  child fields may be respectively "entries", "key", and "value", but this is
#  not enforced.
# 
#  Map
#    - child[0] entries: Struct
#      - child[0] key: K
#      - child[1] value: V
# 
#  Neither the "entries" field nor the "key" field may be nullable.
# 
#  The metadata is structured so that Arrow systems without special handling
#  for Map can make Map an alias for List. The "layout" attribute for the Map
#  field must have the same contents as a List.
=#
#=
#  Set to true if the keys within each value are sorted
=#
    keysSorted::Bool = false
end
FlatBuffers.@ALIGN(Map, 1)
FlatBuffers.slot_offsets(::Type{T}) where {T<:Map} = [
    0x00000004
]

Map(buf::AbstractVector{UInt8}) = FlatBuffers.read(Map, buf)
Map(io::IO) = FlatBuffers.deserialize(io, Map)

end)

