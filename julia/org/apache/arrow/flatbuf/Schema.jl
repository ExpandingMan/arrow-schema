# automatically generated by the FlatBuffers compiler, do not modify

org.apache.arrow.flatbuf.eval(quote


FlatBuffers.@with_kw mutable struct Schema{A, B}
#=
#  ----------------------------------------------------------------------
#  A Schema describes the columns in a row batch
=#
#=
#  endianness of the buffer
#  it is Little Endian by default
#  if endianness doesn't match the underlying system then the vectors need to be converted
=#
    endianness::Endianness = 0
    fields::Vector{A} = []
    custom_metadata::Vector{B} = []
end
FlatBuffers.@ALIGN(Schema, 1)
FlatBuffers.slot_offsets(::Type{T}) where {T<:Schema} = [
    0x00000004, 0x00000006, 0x00000008
]
FlatBuffers.root_type(::Type{T}) where {T<:Schema} = true

Schema(buf::AbstractVector{UInt8}) = FlatBuffers.read(Schema{Field, KeyValue}, buf)
Schema(io::IO) = FlatBuffers.deserialize(io, Schema{Field, KeyValue})

end)

