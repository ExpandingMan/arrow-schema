# automatically generated by the FlatBuffers compiler, do not modify

org.apache.arrow.flatbuf.eval(quote


FlatBuffers.@with_kw mutable struct Field{A, B, C, D}
#=
#  ----------------------------------------------------------------------
#  A field represents a named column in a record / row batch or child of a
#  nested type.
=#
#=
#  Name is not required, in i.e. a List
=#
    name::String = ""
#=
#  Whether or not this field can contain nulls. Should be true in general.
=#
    nullable::Bool = false
    type_type::UInt8 = 0
#=
#  This is the type of the decoded value if the field is dictionary encoded.
=#
    type::A = nothing
#=
#  Present only if the field is dictionary encoded.
=#
    dictionary::Union{B, Nothing} = nothing
#=
#  children apply only to nested data types like Struct, List and Union. For
#  primitive types children will have length 0.
=#
    children::Vector{C} = []
#=
#  User-defined metadata
=#
    custom_metadata::Vector{D} = []
end
FlatBuffers.@ALIGN(Field, 1)
FlatBuffers.slot_offsets(::Type{T}) where {T<:Field} = [
    0x00000004, 0x00000006, 0x00000008, 0x0000000A, 
    0x0000000C, 0x0000000E, 0x00000010
]

Field(buf::AbstractVector{UInt8}) = FlatBuffers.read(Field{Type, DictionaryEncoding, Field, KeyValue}, buf)
Field(io::IO) = FlatBuffers.deserialize(io, Field{Type, DictionaryEncoding, Field, KeyValue})

end)

